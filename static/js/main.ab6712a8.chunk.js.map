{"version":3,"sources":["ChordBuilder/chordBuilder.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["modes","notes","CHROMATIC_FLATS","modePatterns","ionian","dorian","phrygian","lydian","mixolydian","aeolian","locrian","toNote","n","length","Math","floor","buildTriad","tonic","mode","degree","octave","intervals","split","map","x","startPitch","findIndex","startsWith","Number","i","root","third","synth","Tone","toDestination","seq","time","note","triggerAttackRelease","start","App","useState","key","setKey","setMode","degrees","setDegrees","tempo","setTempo","sequenceLength","setSequenceLength","setOctave","useEffect","events","flatMap","startOctave","triad","result","octaveModifier","push","buildSequence","bpm","set","value","className","onClick","name","id","onChange","e","selected","target","console","log","newDegrees","_","htmlFor","type","min","max","a","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ab6712a8.chunk.js","sourcesContent":["export const modes = [\n  \"ionian\",\n  \"dorian\",\n  \"phrygian\",\n  \"lydian\",\n  \"mixolydian\",\n  \"aeolian\",\n  \"locrian\",\n] as const;\nexport type Mode = typeof modes[number];\n\nexport const degrees = [1, 2, 3, 4, 5, 6, 7] as const;\nexport type Degree = typeof degrees[number];\n\nexport const notes = [\n  \"C\",\n  \"C#\",\n  \"Db\",\n  \"D\",\n  \"D#\",\n  \"Eb\",\n  \"E\",\n  \"F\",\n  \"F#\",\n  \"Gb\",\n  \"G\",\n  \"G#\",\n  \"Ab\",\n  \"A\",\n  \"A#\",\n  \"Bb\",\n  \"B\",\n] as const;\n\nexport type Note = typeof notes[number];\nexport type Octave = 2 | 3 | 4 | 5 | 6 | 7;\n\nexport type Chord = Note[];\n\nexport type Pitch = `${Note}${Octave}`;\n\nconst CHROMATIC_FLATS = [\n  \"C\",\n  \"Db\",\n  \"D\",\n  \"Eb\",\n  \"E\",\n  \"F\",\n  \"Gb\",\n  \"G\",\n  \"Ab\",\n  \"A\",\n  \"Bb\",\n  \"B\",\n] as const;\n\nconst modePatterns: { [Property in Mode]: string } = {\n  ionian: \"TTSTTTS\",\n  dorian: \"TSTTTST\",\n  phrygian: \"STTTSTT\",\n  lydian: \"TTTSTTS\",\n  mixolydian: \"TTSTTST\",\n  aeolian: \"TSTTSTT\",\n  locrian: \"STTSTTT\",\n};\n\ntype BuildSequenceOptions = {\n  length?: number;\n  startOctave?: Octave;\n  tonic?: Note;\n  degree?: Degree;\n  mode: Mode;\n};\n\n/* \n  Convert numerical representation of a pitch to a note.\n  Always converts accidentals to flat.\n  e.g.\n    0 -> \"C1\"\n    12 -> \"C2\"\n    13 -> \"Db2\"\n*/\nexport const toNote = (n: number) =>\n  CHROMATIC_FLATS[n % CHROMATIC_FLATS.length] +\n  Math.floor(n / CHROMATIC_FLATS.length + 1);\n\nexport const toPitch = (n: string) =>\n  CHROMATIC_FLATS.findIndex((x) => n.startsWith(x)) +\n  CHROMATIC_FLATS.length * (Number(n[n.length - 1]) - 1);\n\ntype BuildTriadProps = {\n  tonic: Note;\n  mode: Mode;\n  degree: Degree;\n  octave: number;\n};\n\nexport const buildTriad = ({\n  tonic,\n  mode,\n  degree,\n  octave,\n}: BuildTriadProps) => {\n  const pattern = modePatterns[mode];\n  const intervals = pattern.split(\"\").map((x) => (x === \"T\" ? 2 : 1));\n\n  let startPitch = toPitch(tonic + octave);\n  for (let i = 0; i < degree - 1; i++) {\n    startPitch += intervals[i];\n  }\n\n  const root = startPitch;\n  const third =\n    root +\n    intervals[(0 + degree - 1) % intervals.length] +\n    intervals[(1 + degree - 1) % intervals.length];\n  const fifth =\n    third +\n    intervals[(2 + degree - 1) % intervals.length] +\n    intervals[(3 + degree - 1) % intervals.length];\n\n  return [root, third, fifth];\n};\n\nexport const buildSequence = ({\n  length = 3,\n  startOctave = 3,\n  tonic = \"C\",\n  degree = 1,\n  mode,\n}: BuildSequenceOptions) => {\n  const triad = buildTriad({ tonic, mode, degree, octave: startOctave });\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    const octaveModifier: number = Math.floor(result.length / 3) * 12;\n    result.push(triad[i % triad.length] + octaveModifier);\n  }\n  return result.map(toNote);\n};\n","import \"./App.css\";\nimport * as Tone from \"tone\";\nimport { useEffect, useState } from \"react\";\nimport {\n  buildSequence,\n  Degree,\n  Mode,\n  modes,\n  Note,\n  notes,\n  Octave,\n} from \"./ChordBuilder/chordBuilder\";\n\nconst synth = new Tone.Synth().toDestination();\nconst seq = new Tone.Sequence((time, note) => {\n  synth.triggerAttackRelease(note, 0.1, time);\n}, []).start(0);\n\nfunction App() {\n  const [key, setKey] = useState<Note>(\"C\");\n  const [mode, setMode] = useState<Mode>(\"ionian\");\n  const [degrees, setDegrees] = useState<Degree[]>([1, 2, 3, 4, 5, 6, 7, 1]);\n  const [tempo, setTempo] = useState<number>(180);\n  const [sequenceLength, setSequenceLength] = useState<number>(9);\n  const [octave, setOctave] = useState<Octave>(2);\n\n  useEffect(() => {\n    seq.events = degrees.flatMap((degree) =>\n      buildSequence({\n        length: sequenceLength,\n        startOctave: octave,\n        degree,\n        tonic: key,\n        mode,\n      })\n    );\n  }, [mode, key, degrees, sequenceLength, octave]);\n\n  useEffect(() => {\n    Tone.getTransport().bpm.set({ value: tempo });\n  }, [tempo]);\n\n  return (\n    <div className=\"App\">\n      <div>\n        <div>\n          <div>\n            <div>\n              {notes.map((note) => (\n                <button onClick={() => setKey(note)}>{note}</button>\n              ))}\n            </div>\n            <div>\n              {modes.map((mode) => (\n                <button onClick={() => setMode(mode)}>{mode}</button>\n              ))}\n            </div>\n\n            {degrees.map((x, i) => {\n              return (\n                <>\n                  <select\n                    key=\"x\"\n                    name=\"degree\"\n                    id=\"degree\"\n                    value={x}\n                    onChange={(e) => {\n                      const selected = e.target.value;\n                      console.log(\"SELECTED\", selected);\n                      let newDegrees = [...degrees];\n                      newDegrees[i] = Number(selected) as Degree;\n                      setDegrees(newDegrees);\n                    }}\n                  >\n                    {degrees.map((_, i) => (\n                      <option value={i + 1}>{i + 1}</option>\n                    ))}\n                  </select>\n                </>\n              );\n            })}\n          </div>\n\n          <label htmlFor=\"tempo\">Tempo</label>\n          <input\n            id=\"tempo\"\n            type=\"range\"\n            value={tempo}\n            min={40}\n            max={360}\n            onChange={(e) => {\n              setTempo(Number(e.target.value));\n            }}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"sequenceLength\">Length</label>\n          <input\n            id=\"sequenceLength\"\n            type=\"range\"\n            value={sequenceLength}\n            min={1}\n            max={12}\n            onChange={(e) => {\n              setSequenceLength(Number(e.target.value));\n            }}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"octave\">Octave</label>\n          <input\n            id=\"octave\"\n            type=\"range\"\n            value={octave}\n            min={1}\n            max={4}\n            onChange={(e) => {\n              setOctave(Number(e.target.value) as Octave);\n            }}\n          />\n        </div>\n      </div>\n\n      <button\n        onClick={async () => {\n          await Tone.start();\n          Tone.Transport.start();\n        }}\n      >\n        init\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}