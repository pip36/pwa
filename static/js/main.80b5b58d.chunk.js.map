{"version":3,"sources":["App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["notes","synth","Tone","toDestination","seq","time","note","triggerAttackRelease","start","App","useState","selectedNotes","setSelectedNotes","tempo","setTempo","useEffect","events","map","n","bpm","set","value","className","htmlFor","id","type","onChange","e","Number","target","onClick","a","isSelected","includes","x","filter","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gRAIMA,EAAkB,CACtB,IACA,KACA,IACA,KACA,IACA,IACA,KACA,IACA,KACA,IACA,KACA,KAIIC,GAAQ,IAAIC,KAAaC,gBACzBC,EAAM,IAAIF,KAAc,SAACG,EAAMC,GACnCL,EAAMM,qBAAqBD,EAAM,GAAKD,KAErC,IAAIG,MAAM,GAmDEC,MAjDf,WAAgB,IAAD,EAC6BC,mBAAmB,CAAC,MADjD,mBACNC,EADM,KACSC,EADT,OAEaF,mBAAiB,KAF9B,mBAENG,EAFM,KAECC,EAFD,KAYb,OARAC,qBAAU,WACRX,EAAIY,OAAJ,sBAAiBL,EAAcM,KAAI,SAACC,GAAD,OAAOA,EAAI,QAA9C,CAAoDP,EAAc,GAAK,QACtE,CAACA,IAEJI,qBAAU,WACRb,MAAoBiB,IAAIC,IAAI,CAAEC,MAAOR,MACpC,CAACA,IAGF,sBAAKS,UAAU,MAAf,UACE,uBAAOC,QAAQ,QAAf,mBACA,uBACEC,GAAG,QACHC,KAAK,SACLJ,MAAOR,EACPa,SAAU,SAACC,GACTb,EAASc,OAAOD,EAAEE,OAAOR,WAG7B,wBACES,QAAO,sBAAE,sBAAAC,EAAA,sEACD7B,MADC,OAEPA,IAAeM,QAFR,2CADX,kBAQCR,EAAMiB,KAAI,SAACX,GAAD,OACT,yBACEwB,QAAS,WACP,IAAME,EAAarB,EAAcsB,SAAS3B,GAExCM,EADEoB,EACe,SAACE,GAAD,OAAOA,EAAEC,QAAO,SAACjB,GAAD,OAAOA,IAAMZ,MAE7B,SAAC4B,GAAD,4BAAWA,GAAX,CAAc5B,OANrC,UAUGA,EAVH,IAUUK,EAAcsB,SAAS3B,IAAS,mBCxD9B8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCfnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YEpH5BtB,M","file":"static/js/main.80b5b58d.chunk.js","sourcesContent":["import \"./App.css\";\nimport * as Tone from \"tone\";\nimport { useEffect, useState } from \"react\";\n\nconst notes: string[] = [\n  \"C\",\n  \"C#\",\n  \"D\",\n  \"D#\",\n  \"E\",\n  \"F\",\n  \"F#\",\n  \"G\",\n  \"G#\",\n  \"A\",\n  \"A#\",\n  \"B\",\n];\n\n//create a synth and connect it to the main output (your speakers)\nconst synth = new Tone.Synth().toDestination();\nconst seq = new Tone.Sequence((time, note) => {\n  synth.triggerAttackRelease(note, 0.1, time);\n  // subdivisions are given as subarrays\n}, []).start(0);\n\nfunction App() {\n  const [selectedNotes, setSelectedNotes] = useState<string[]>([\"C\"]);\n  const [tempo, setTempo] = useState<number>(120);\n\n  useEffect(() => {\n    seq.events = [...selectedNotes.map((n) => n + \"4\"), selectedNotes[0] + \"5\"];\n  }, [selectedNotes]);\n\n  useEffect(() => {\n    Tone.getTransport().bpm.set({ value: tempo });\n  }, [tempo]);\n\n  return (\n    <div className=\"App\">\n      <label htmlFor=\"tempo\">Tempo</label>\n      <input\n        id=\"tempo\"\n        type=\"number\"\n        value={tempo}\n        onChange={(e) => {\n          setTempo(Number(e.target.value));\n        }}\n      />\n      <button\n        onClick={async () => {\n          await Tone.start();\n          Tone.Transport.start();\n        }}\n      >\n        init\n      </button>\n      {notes.map((note) => (\n        <button\n          onClick={() => {\n            const isSelected = selectedNotes.includes(note);\n            if (isSelected) {\n              setSelectedNotes((x) => x.filter((n) => n !== note));\n            } else {\n              setSelectedNotes((x) => [...x, note]);\n            }\n          }}\n        >\n          {note} {selectedNotes.includes(note) && \"âœ”\"}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}