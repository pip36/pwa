{"version":3,"sources":["balloon.gif","Balloon.tsx","App.tsx","useAnimationFrame.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["useStyles","createUseStyles","balloon","position","img","Balloon","y","color","classes","useState","x","setX","useEffect","randomLeft","className","style","left","bottom","width","src","alt","filter","max","Math","floor","random","toString","getWrapPosition","yPos","deltaTime","newPos","App","balloons","setBalloons","callback","requestRef","useRef","previousTimeRef","animate","useCallback","time","undefined","current","requestAnimationFrame","cancelAnimationFrame","useAnimationFrame","prevBalloons","map","b","opacity","i","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kPAAe,MAA0B,oC,OCInCA,EAAYC,YAAgB,CAChCC,QAAS,CACPC,SAAU,WACVC,IAAK,MASIC,EAAU,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,EAAGC,EAA0B,EAA1BA,MACrBC,EAAUR,IADqC,EAGnCS,mBAAS,WAH0B,mBAG9CC,EAH8C,KAG3CC,EAH2C,KASrD,OAJAC,qBAAU,WACRD,EAAKE,OACJ,IAGD,qBAAKC,UAAWN,EAAQN,QAASa,MAAO,CAAEC,KAAMN,EAAGO,OAAQX,GAA3D,SACE,qBAAKY,MAAO,IAAKC,IAAKjB,EAASkB,IAAI,UAAUL,MAAO,CAAEM,OAAQd,QAO9DM,EAAa,kBAFHS,EAEgB,GAFAC,KAAKC,MAAMD,KAAKE,SAAWH,IAEvBI,WAAa,KAFlC,IAACJ,GCchB,IAAMK,EAAkB,SAACC,EAAcC,GACrC,IAAMC,EAASF,EAAmB,GAAZC,EACtB,OAAOC,EAAS,KAAQ,IAAMA,GAGjBC,EA9Cf,WAAgB,IAAD,EACmBtB,mBAAyB,CACvD,CACEH,GAAI,IACJC,MAAO,+DAET,CACED,GAAI,IACJC,MAAO,gEAET,CACED,GAAI,KACJC,MAAO,iEAET,CACED,GAAI,IACJC,MAAO,iEAET,CACED,GAAI,IACJC,MAAO,mEApBE,mBACNyB,EADM,KACIC,EADJ,KA8Bb,OCjC+B,SAACC,GAGhC,IAAMC,EAAaC,mBACbC,EAAkBD,mBAElBE,EAAUC,uBACd,SAACC,GACC,QAAgCC,IAA5BJ,EAAgBK,QAAuB,CACzC,IAAMb,EAAYW,EAAOH,EAAgBK,QACzCR,EAASL,GAEXQ,EAAgBK,QAAUF,EAC1BL,EAAWO,QAAUC,sBAAsBL,KAE7C,CAACJ,IAGHtB,qBAAU,WAER,OADAuB,EAAWO,QAAUC,sBAAsBL,GACpC,kBAAMM,qBAAqBT,EAAWO,SAAW,MACvD,CAACJ,IDMJO,EAAkB,SAAChB,GACjBI,GAAY,SAACa,GAAD,OACVA,EAAaC,KAAI,SAACC,GAAD,mBAAC,eAAYA,GAAb,IAAgB1C,EAAGqB,EAAgBqB,EAAE1C,EAAGuB,cAK3D,sBAAKf,UAAU,MAAf,UACE,qBAAKC,MAAO,CAAEkC,QAAS,GAAvB,eAECjB,EAASe,KAAI,WAAeG,GAAf,IAAG5C,EAAH,EAAGA,EAAGC,EAAN,EAAMA,MAAN,OACZ,cAAC,EAAD,CAAiBD,EAAGA,EAAGC,MAAOA,GAAhB2C,UE5BFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCfnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YEpH5BtB,M","file":"static/js/main.3d32246c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/balloon.6cda554e.gif\";","import { useEffect, useState } from \"react\";\nimport { createUseStyles } from \"react-jss\";\nimport balloon from \"./balloon.gif\";\n\nconst useStyles = createUseStyles({\n  balloon: {\n    position: \"absolute\",\n    img: {},\n  },\n});\n\nexport interface BalloonProps {\n  y: number;\n  color: string;\n}\n\nexport const Balloon = ({ y, color }: BalloonProps) => {\n  const classes = useStyles();\n\n  const [x, setX] = useState(\"-1000px\");\n\n  useEffect(() => {\n    setX(randomLeft());\n  }, []);\n\n  return (\n    <div className={classes.balloon} style={{ left: x, bottom: y }}>\n      <img width={300} src={balloon} alt=\"balloon\" style={{ filter: color }} />\n    </div>\n  );\n};\n\nconst random = (max: number) => Math.floor(Math.random() * max);\n\nconst randomLeft = () => random(80).toString() + \"vw\";\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport { Balloon, BalloonProps } from \"./Balloon\";\nimport { useAnimationFrame } from \"./useAnimationFrame\";\n\nfunction App() {\n  const [balloons, setBalloons] = useState<BalloonProps[]>([\n    {\n      y: -1000,\n      color: \"sepia(100%) saturate(300%) brightness(70%) hue-rotate(0deg)\",\n    },\n    {\n      y: -800,\n      color: \"sepia(100%) saturate(300%) brightness(70%) hue-rotate(90deg)\",\n    },\n    {\n      y: -1200,\n      color: \"sepia(100%) saturate(300%) brightness(70%) hue-rotate(180deg)\",\n    },\n    {\n      y: -500,\n      color: \"sepia(100%) saturate(300%) brightness(70%) hue-rotate(270deg)\",\n    },\n    {\n      y: -200,\n      color: \"sepia(100%) saturate(300%) brightness(70%) hue-rotate(320deg)\",\n    },\n  ]);\n\n  useAnimationFrame((deltaTime: number) => {\n    setBalloons((prevBalloons) =>\n      prevBalloons.map((b) => ({ ...b, y: getWrapPosition(b.y, deltaTime) }))\n    );\n  });\n\n  return (\n    <div className=\"App\">\n      <div style={{ opacity: 0 }}>.</div>\n\n      {balloons.map(({ y, color }, i) => (\n        <Balloon key={i} y={y} color={color} />\n      ))}\n    </div>\n  );\n}\n\nconst getWrapPosition = (yPos: number, deltaTime: number) => {\n  const newPos = yPos + deltaTime * 0.3;\n  return newPos > 1000 ? -300 : newPos;\n};\n\nexport default App;\n","import { useEffect, useRef, useCallback } from \"react\";\n\nexport const useAnimationFrame = (callback: (n: number) => void): void => {\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  const requestRef = useRef<number>();\n  const previousTimeRef = useRef<number>();\n\n  const animate = useCallback(\n    (time: number) => {\n      if (previousTimeRef.current !== undefined) {\n        const deltaTime = time - previousTimeRef.current;\n        callback(deltaTime);\n      }\n      previousTimeRef.current = time;\n      requestRef.current = requestAnimationFrame(animate);\n    },\n    [callback]\n  );\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current || 0);\n  }, [animate]);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}