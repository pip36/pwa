{"version":3,"sources":["ChordBuilder/chordBuilder.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["modes","degrees","notes","CHROMATIC_SHARPS","CHROMATIC_FLATS","flatMajors","ionianSwapEnharmonic","Gb","dorianSwapEnharmonic","Db","Ab","modePatterns","ionian","dorian","phrygian","lydian","mixolydian","aeolian","locarian","buildScale","mode","tonic","swapTonic","swapEnharmonic","undefined","pattern","NOTES","includes","intervals","split","map","x","currIndex","findIndex","result","forEach","interval","push","length","synth","Tone","toDestination","seq","time","note","triggerAttackRelease","start","App","useState","key","setKey","setMode","degree","setDegree","tempo","setTempo","sequenceLength","setSequenceLength","octave","setOctave","useEffect","events","startOctave","scale","i","noteIndex","octaveModifier","buildSequence","bpm","set","value","className","onClick","type","id","toString","name","onChange","checked","htmlFor","min","max","e","Number","target","a","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ae05dccd.chunk.js","sourcesContent":["export const modes = [\n  \"ionian\",\n  \"dorian\",\n  \"phrygian\",\n  \"lydian\",\n  \"mixolydian\",\n  \"aeolian\",\n  \"locarian\",\n] as const;\nexport type Mode = typeof modes[number];\n\nexport const degrees = [1, 2, 3, 4, 5, 6, 7] as const;\nexport type Degree = typeof degrees[number];\n\nexport const notes = [\n  \"C\",\n  \"C#\",\n  \"Db\",\n  \"D\",\n  \"D#\",\n  \"Eb\",\n  \"E\",\n  \"F\",\n  \"F#\",\n  \"Gb\",\n  \"G\",\n  \"G#\",\n  \"Ab\",\n  \"A\",\n  \"A#\",\n  \"Bb\",\n  \"B\",\n] as const;\n\nexport type Note = typeof notes[number];\nexport type Octave = 2 | 3 | 4 | 5 | 6 | 7;\n\nexport type Chord = Note[];\n\nexport type Pitch = `${Note}${Octave}`;\n\nconst CHROMATIC_SHARPS = [\n  \"C\",\n  \"C#\",\n  \"D\",\n  \"D#\",\n  \"E\",\n  \"F\",\n  \"F#\",\n  \"G\",\n  \"G#\",\n  \"A\",\n  \"A#\",\n  \"B\",\n] as const;\n\nconst CHROMATIC_FLATS = [\n  \"C\",\n  \"Db\",\n  \"D\",\n  \"Eb\",\n  \"E\",\n  \"F\",\n  \"Gb\",\n  \"G\",\n  \"Ab\",\n  \"A\",\n  \"Bb\",\n  \"B\",\n] as const;\n\nconst flatMajors = [\"Db\", \"Eb\", \"F\", \"Ab\", \"Bb\"];\n\ntype NoteMap = Partial<{ [Property in Note]: Note }>;\nconst swapEnharmonic = (mode: Mode): NoteMap => {\n  switch (mode) {\n    case \"ionian\":\n      return ionianSwapEnharmonic;\n    case \"dorian\":\n      return dorianSwapEnharmonic;\n    default:\n      return ionianSwapEnharmonic;\n  }\n};\n\nconst ionianSwapEnharmonic: NoteMap = {\n  \"C#\": \"Db\",\n  Gb: \"F#\",\n  \"G#\": \"Ab\",\n  \"D#\": \"Eb\",\n};\nconst dorianSwapEnharmonic: NoteMap = {\n  Db: \"C#\",\n  Gb: \"F#\",\n  Ab: \"G#\",\n  \"D#\": \"Eb\",\n  \"A#\": \"Bb\",\n};\n\nconst modePatterns: { [Property in Mode]: string } = {\n  ionian: \"TTSTTTS\",\n  dorian: \"TSTTTST\",\n  phrygian: \"STTTSTT\",\n  lydian: \"TTTSTTS\",\n  mixolydian: \"TTSTTST\",\n  aeolian: \"TSTTSTT\",\n  locarian: \"STTSTTT\",\n};\n\nexport const buildScale = (mode: Mode, tonic: Note) => {\n  const swapTonic = swapEnharmonic(mode)[tonic];\n  if (swapTonic !== undefined) {\n    tonic = swapTonic;\n  }\n  const pattern = modePatterns[mode];\n  const NOTES = flatMajors.includes(tonic) ? CHROMATIC_FLATS : CHROMATIC_SHARPS;\n  const intervals = pattern.split(\"\").map((x) => (x === \"T\" ? 2 : 1));\n  let currIndex = NOTES.findIndex((x: Note) => x === tonic);\n  const result: Note[] = [];\n\n  intervals.forEach((interval) => {\n    result.push(NOTES[currIndex]);\n    currIndex += interval;\n    currIndex = currIndex % NOTES.length;\n  });\n\n  return result;\n};\n\ntype BuildSequenceOptions = {\n  length?: number;\n  startOctave?: Octave;\n  tonic?: Note;\n  degree?: Degree;\n  mode: Mode;\n};\n\nexport const buildSequence = ({\n  length = 3,\n  startOctave = 3,\n  tonic = \"C\",\n  degree = 1,\n  mode,\n}: BuildSequenceOptions) => {\n  const result: string[] = [];\n\n  const scale = buildScale(mode, tonic);\n\n  let i = 0;\n  let noteIndex = degree - 1;\n  let octaveModifier = 0;\n  while (result.length < length) {\n    const note = scale[i % scale.length];\n\n    if ((i > 0 || mode !== \"ionian\") && note[0] === \"C\") {\n      octaveModifier++;\n    }\n\n    if (i === noteIndex) {\n      result.push(note + (startOctave + octaveModifier));\n      noteIndex += 2;\n      if (result.length % 3 === 0) {\n        noteIndex += 1;\n      }\n    }\n\n    i++;\n  }\n\n  return result;\n};\n","import \"./App.css\";\nimport * as Tone from \"tone\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  buildSequence,\n  Degree,\n  degrees,\n  Mode,\n  modes,\n  Note,\n  notes,\n  Octave,\n} from \"./ChordBuilder/chordBuilder\";\n\nconst synth = new Tone.Synth().toDestination();\nconst seq = new Tone.Sequence((time, note) => {\n  synth.triggerAttackRelease(note, 0.1, time);\n}, []).start(0);\n\nfunction App() {\n  const [key, setKey] = useState<Note>(\"C\");\n  const [mode, setMode] = useState<Mode>(\"ionian\");\n  const [degree, setDegree] = useState<Degree>(1);\n  const [tempo, setTempo] = useState<number>(180);\n  const [sequenceLength, setSequenceLength] = useState<number>(9);\n  const [octave, setOctave] = useState<Octave>(2);\n\n  useEffect(() => {\n    seq.events = buildSequence({\n      length: sequenceLength,\n      startOctave: octave,\n      degree,\n      tonic: key,\n      mode,\n    });\n  }, [mode, key, degree, sequenceLength, octave]);\n\n  useEffect(() => {\n    Tone.getTransport().bpm.set({ value: tempo });\n  }, [tempo]);\n\n  return (\n    <div className=\"App\">\n      <div>\n        <div>\n          <div>\n            <div>\n              {notes.map((note) => (\n                <button onClick={() => setKey(note)}>{note}</button>\n              ))}\n            </div>\n            <div>\n              {modes.map((mode) => (\n                <button onClick={() => setMode(mode)}>{mode}</button>\n              ))}\n            </div>\n\n            {degrees.map((x) => {\n              return (\n                <>\n                  <input\n                    type=\"radio\"\n                    id={x.toString()}\n                    name=\"degree\"\n                    value={x}\n                    onChange={() => setDegree(x)}\n                    checked={x === degree}\n                  />\n\n                  <label htmlFor={x.toString()}>{x}</label>\n                </>\n              );\n            })}\n          </div>\n\n          <label htmlFor=\"tempo\">Tempo</label>\n          <input\n            id=\"tempo\"\n            type=\"range\"\n            value={tempo}\n            min={40}\n            max={360}\n            onChange={(e) => {\n              setTempo(Number(e.target.value));\n            }}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"sequenceLength\">Length</label>\n          <input\n            id=\"sequenceLength\"\n            type=\"range\"\n            value={sequenceLength}\n            min={1}\n            max={12}\n            onChange={(e) => {\n              setSequenceLength(Number(e.target.value));\n            }}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"octave\">Octave</label>\n          <input\n            id=\"octave\"\n            type=\"range\"\n            value={octave}\n            min={1}\n            max={4}\n            onChange={(e) => {\n              setOctave(Number(e.target.value) as Octave);\n            }}\n          />\n        </div>\n      </div>\n\n      <button\n        onClick={async () => {\n          await Tone.start();\n          Tone.Transport.start();\n        }}\n      >\n        init\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}